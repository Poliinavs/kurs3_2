CREATE TABLE Users (
    customer_id INT PRIMARY KEY,
    fio VARCHAR(100),
    email VARCHAR(100),
    password VARCHAR(150),
    address VARCHAR(255)
);


CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    title VARCHAR(100),
    description VARCHAR(300),
    price FLOAT,
    category_id INT,
    FOREIGN KEY (category_id) REFERENCES ProductCategories(category_id)
);

-- Создание таблицы "ShoppingCarts"
CREATE TABLE ShoppingCarts (
    cart_id INT PRIMARY KEY,
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Users(customer_id)
);

-- Создание таблицы для связи многие ко многим "ProductShoppingCartItems"
CREATE TABLE ProductShoppingCartItems (
    cart_id INT,
    product_id INT,
    FOREIGN KEY (cart_id) REFERENCES ShoppingCarts(cart_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Создание таблицы "Orders"
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATETIME,
    status VARCHAR(50),
    customer_id INT FOREIGN KEY REFERENCES Users(customer_id)
);

-- Создание таблицы "ProductCategories"
CREATE TABLE ProductCategories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(50)
);

CREATE INDEX idx_cart_product ON ProductShoppingCartItems(cart_id, product_id); --поиск по корзине и продукту
CREATE INDEX idx_customer_id_orders ON Orders(customer_id); --по заказам пользователя 
CREATE INDEX idx_category_name ON ProductCategories(category_name); -- ускорение запросов по категориям 

--детали заказа 
CREATE VIEW OrderDetailsView AS
SELECT 
    o.order_id,
    o.order_date,
    o.status,
    o.customer_id,
    u.fio AS customer_name,
    p.product_id,
    p.title,
    p.price
FROM Orders o
JOIN Users u ON o.customer_id = u.customer_id
JOIN ProductShoppingCartItems psi ON o.customer_id = u.customer_id
JOIN Products p ON psi.product_id = p.product_id;

select * from OrderDetailsView 

--автоматически обновляет статус заказа, когда приходит новый заказ
CREATE TRIGGER UpdateOrderStatus
ON Orders
AFTER INSERT
AS
BEGIN
    UPDATE o
    SET status = 'Processing'
    FROM Orders o
    INNER JOIN inserted i ON o.order_id = i.order_id;
END;

--Получение информации о продуктах в корзине для заданного пользователя:
CREATE FUNCTION GetProductsInCart(@customerId INT)
RETURNS TABLE
AS
RETURN (
    SELECT P.product_id, P.title, P.description, P.price
    FROM Products P
    JOIN ProductShoppingCartItems PSI ON P.product_id = PSI.product_id
    JOIN ShoppingCarts SC ON PSI.cart_id = SC.cart_id
    WHERE SC.customer_id = @customerId
);

SELECT * FROM GetProductsInCart(1);

--Получение информации о заказах для заданного пользователя:
CREATE FUNCTION GetOrdersForUser(@customerId INT)
RETURNS TABLE
AS
RETURN (
    SELECT O.order_id, O.order_date, O.status
    FROM Orders O
    WHERE O.customer_id = @customerId
);

SELECT * FROM GetOrdersForUser(1);

--Получение категории продукта по его идентификатору
CREATE FUNCTION GetProductCategory(@productId INT)
RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @categoryName VARCHAR(50);
    SELECT @categoryName = PC.category_name
    FROM Products P
    JOIN ProductCategories PC ON P.category_id = PC.category_id
    WHERE P.product_id = @productId;
    RETURN @categoryName;
END;

DECLARE @productId INT = 1;
SELECT dbo.GetProductCategory(@productId) AS ProductCategory;
--Добавление товара в корзину
CREATE PROCEDURE AddProductToCart(@customerId INT, @productId INT)
AS
BEGIN
    DECLARE @cartId INT;
    SELECT @cartId = cart_id
    FROM ShoppingCarts
    WHERE customer_id = @customerId;

    IF @cartId IS NOT NULL
    BEGIN
        INSERT INTO ProductShoppingCartItems(cart_id, product_id)
        VALUES (@cartId, @productId);
    END
    ELSE
    BEGIN
        THROW 50000, 'Shopping cart not found for the given customer.', 1;
    END;
END;

EXEC AddProductToCart @customerId = 1, @productId = 2;


--Создание нового заказа:
CREATE PROCEDURE CreateOrder(@customerId INT,@orderId INT, @orderDate DATETIME)
AS
BEGIN
    INSERT INTO Orders(customer_id, order_date, order_id)
    VALUES (@customerId,  @orderDate, @orderId);
END;

EXEC CreateOrder @customerId = 1,  @orderId = 3, @orderDate = '2015-12-25T15:32:06.427';

--Обновление информации о продукте:
CREATE PROCEDURE UpdateProduct(@productId INT, @newPrice FLOAT)
AS
BEGIN
    UPDATE Products
    SET price = @newPrice
    WHERE product_id = @productId;
END;

EXEC UpdateProduct @productId = 3, @newPrice = 25.99;


--вставка данных

INSERT INTO Users (customer_id, fio, email, password, address)
VALUES
    (1, 'John Doe', 'john.doe@example.com', 'hashed_password_1', '123 Main St'),
    (2, 'Jane Smith', 'jane.smith@example.com', 'hashed_password_2', '456 Oak Ave'),
    (3, 'Bob Johnson', 'bob.johnson@example.com', 'hashed_password_3', '789 Pine Ln');

INSERT INTO ProductCategories (category_id, category_name)
VALUES
    (1, 'Electronics'),
    (2, 'Clothing'),
    (3, 'Books');

-- Insert data into Products table
INSERT INTO Products (product_id, title, description, price, category_id)
VALUES
    (1, 'Smartphone', 'High-end smartphone with advanced features', 799.99, 1),
    (2, 'Laptop', 'Powerful laptop for productivity', 1299.99, 1),
    (3, 'T-shirt', 'Comfortable cotton T-shirt', 19.99, 2);

-- Insert data into ShoppingCarts table
INSERT INTO ShoppingCarts (cart_id, customer_id)
VALUES
    (1, 1),
    (2, 2),
    (3, 3);

-- Insert data into ProductShoppingCartItems table
INSERT INTO ProductShoppingCartItems (cart_id, product_id)
VALUES
    (1, 1),
    (1, 3),
    (2, 2),
    (2, 4),
    (3, 5);

INSERT INTO Orders (order_id, order_date, customer_id)
VALUES
    (1,'2015-12-25T15:32:06.427', 1),
    (2, '2014-12-25T15:32:06.427', 2),
    (3, '2016-12-25T15:32:06.427', 3);

	select * from Orders

	INSERT INTO ProductCategories (category_id, category_name)
VALUES
    (8, 'Electronics'),
    (6, 'Electronics'),
    (7, 'Electronics'),
    (4, 'Electronics'),
    (5, 'Electronics');

	SELECT category_id, category_name
FROM ProductCategories 
WHERE category_name = 'Electronics';

SELECT cart_id, product_id
FROM ProductShoppingCartItems 
WHERE cart_id = 1 AND product_id = 2;
