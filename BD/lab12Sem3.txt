--PDB_Polina
CREATE TABLE Report (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    xml_inf XMLType
);

delete from report

ALTER TABLE Orders DROP CONSTRAINT ProductId;

Create TABLE Products (
    ProductID INT PRIMARY KEY,
    Name NVARCHAR2(100),
    Price NUMBER(10, 2),
    Category NVARCHAR2(50)
);

-- Создание таблицы "Orders"
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE,
    ProductID INT REFERENCES Products(ProductID),
    Quantity INT
);

-- Создание таблицы "Customers"
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName NVARCHAR2(50),
    LastName NVARCHAR2(50),
    Email NVARCHAR2(100),
    Phone NVARCHAR2(20)
);

-- Вставка данных в таблицу "Products"
INSERT INTO Products (ProductID, Name, Price, Category)
VALUES 
    (3, 'Sneakers', 49.99, 'Shoes');

-- Вставка данных в таблицу "Orders"
INSERT 
    INTO Orders (OrderID, OrderDate, ProductID, Quantity) VALUES (3, TO_DATE('2024-05-02', 'YYYY-MM-DD'), 3, 1)

-- Вставка данных в таблицу "Customers"
INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone)
VALUES 
    (3, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210');
    commit;


CREATE OR REPLACE PROCEDURE GenerateReportXML AS
    v_xml XMLType;
BEGIN
    SELECT XMLELEMENT("Report",
               XMLELEMENT("Timestamp", SYSTIMESTAMP),
               XMLELEMENT("Customers",
                   XMLAGG(
                       XMLELEMENT("Customer",
                           XMLFOREST(c.CustomerID AS "CustomerID",
                                     c.FirstName AS "FirstName",
                                     c.LastName AS "LastName",
                                     c.Email AS "CustomerEmail",
                                     c.Phone AS "CustomerPhone")
                       )
                   )
               ),
               XMLELEMENT("Products",
                   XMLAGG(
                       XMLELEMENT("Product",
                           XMLFOREST(p.ProductID AS "ProductID",
                                     p.Name AS "ProductName",
                                     p.Price AS "ProductPrice",
                                     p.Category AS "ProductCategory")
                       )
                   )
               ),
               XMLELEMENT("Orders",
                   XMLAGG(
                       XMLELEMENT("Order",
                           XMLFOREST(o.OrderID AS "OrderID",
                                     o.OrderDate AS "OrderDate",
                                     o.ProductID AS "ProductID",
                                     o.Quantity AS "Quantity")
                       )
                   )
               )
           )
    INTO v_xml
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.PRODUCTID
    JOIN Products p ON o.ProductID = p.ProductID;
    

    -- Вставка сгенерированного XML в таблицу Report
    INSERT INTO Report (xml_inf) VALUES (v_xml);

    COMMIT;
END;


BEGIN
    GenerateReportXML;
END;

COMMIT;
SELECT * FROM REPORT

CREATE OR REPLACE PROCEDURE ExtractDataFromReportXML(
    p_element_name VARCHAR2,
    p_attribute_value VARCHAR2 DEFAULT NULL
) AS
    v_xml XMLType;
    v_result XMLType;
BEGIN
    
    SELECT xml_inf INTO v_xml
    FROM Report;

    IF p_attribute_value IS NULL THEN
        v_result := v_xml.extract('/Report//' || p_element_name);
    ELSE
        v_result := v_xml.extract('/Report//*[' || p_element_name || '@' || p_attribute_value || ']');
    END IF;

    DBMS_OUTPUT.PUT_LINE('Extracted data:');
    DBMS_OUTPUT.PUT_LINE(v_result.getStringVal());
END;
/
BEGIN
    ExtractDataFromReportXML('Customers');
END;

/