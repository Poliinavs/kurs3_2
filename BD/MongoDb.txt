все продукты с ценой больше 1000
db.products.find({ "price": { $gt: 1000 } })

выбрать все заказы с общей суммой меньше 2000
db.orders.find({ "totalAmount": { $lt: 2000 } })

выбрать все заказы, которые содержат продукт с ID "PROD001"
db.orders.find({ "items.productId": "PROD001" })

выбрать все заказы, у которых есть поле "shippingAddress"
db.orders.find({ "shippingAddress": { $exists: true } })

 выбрать все заказы, у которых поле "totalAmount" является числом
db.orders.find({ "totalAmount": { $type: "number" } })

 выбрать всех клиентов, у которых email заканчивается на "example.com"
db.orders.find({ "customer.email": { $regex: "example\\.com$" } })

--2
ыбрать все продукты и показать только их name и price
db.products.find({}, { "name": 1, "price": 1, "_id": 0 })

--3
db.products.countDocuments()
db.products.countDocuments({ "price": { $gt: 1000 } })

--4
db.products.find().limit(5)
db.orders.find().skip(2).limit(3)
--5
db.products.distinct("category")
--6 Группировка и подсчет количества документов по значению поля
db.orders.aggregate([
    {
        $group: {
            _id: "$status",
            count: { $sum: 1 }
        }
    }
])

--Вычисление общей суммы заказов для каждого клиента
db.orders.aggregate([
    {
        $group: {
            _id: "$customer.name",
            totalAmount: { $sum: "$totalAmount" }
        }
    }
])
--7

db.orders.aggregate([
    {
        $match: { "status": { $exists: false } }
    }
]) 

Получить все заказы из коллекции, у которых есть значение поля status.
db.orders.aggregate([
    {
        $match: { "status": { $exists: true, $ne: null } }
    }
])

